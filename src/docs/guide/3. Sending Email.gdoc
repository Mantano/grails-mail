Mail is sent using the @sendMail()@ method of the @mailService@. This plugin also adds a shortcut @sendMail()@ method to all controllers and services in your application that simply delegates to the @mailService@.

{code}
class PersonController {
    
    def create = {
        // create user
        
        sendMail {
            from "admin@mysystem.com"
            subject "New user"
            text "A new user has been created"
        }
    }
    
}
{code}

The @sendMail()@ method takes a single @Closure@ argument that uses a DSL to configure the message to be sent. This section describes the aspects of the DSL.

Alternatively, you can use the @sendMail@ method of the @mailService@ directly.

{code}
class PersonController {
    
    def mailService
    
    def create = {
        // create user
        
        mailService.sendMail {
            from "admin@mysystem.com"
            subject "New user"
            text "A new user has been created"
        }
    }
    
}
{code}

h3. Recipients

The DSL provides @to@, @cc@ and @bcc@ methods that allow you to set one or more address values for these recipient types.

{code}
sendMail {
    to "someone@org.com"
    cc "manager@org.com"
    bcc "employee1\@org.com", "employee2\@org.com"
    â€¦
}
{code}

All methods take one or more string values that are an email address using the syntax of "RFC822":http://www.ietf.org/rfc/rfc822.txt. Typical address syntax is of the form @"user\@host.domain"@ or @"Personal Name <user\@host.domain>"@.

h3. Message Content

To send HTML mail you can use the @html@ method instead of the @body@ method:

{code}
sendMail {
  to "fred@g2one.com"
  subject "Hello John"
  html "<b>Hello</b> World"
}
{code}

If your HTML is contained within a GSP template you can use the render tag called as a method (available in controllers and tag libraries):

{code}
sendMail {
  to "john@g2one.com"
  subject "Hello John"
  html g.render(template: "myMailTemplate")
}
{code}

If you wish to render a mail body from a GSP view from anywhere in your application, including from services or jobs where there may or may not be a current request, you can pass a view, model, and optional plugin to the @html@ method:

{code}
sendMail {
  to "john@g2one.com"
  subject "Hello John"
  html(view: "/emailconfirmation/mail/confirmationRequest",
      plugin: "email-confirmation",
      model: [fromAddress: "bill@microsoft.com"])
}
{code}

The view is the absolute path (or relative if you have a current controller) to the GSP. If you need to render a template that may exist in a plugin installed in your application, you must include the name in the plugin parameter. The model parameter is a map representing the model the GSP will see for rendering data.

The content-type is always set to text/html when using the @html@ method. When using the @body@ method, the content-type defaults to text/plain, so you must include the GSP page contentType directive at the top of the GSP for a HTML email:

{code}
<%\@ page contentType="text/html" %>
{code}

This plugin also accepts emails in the form "Bill Gates<bill@microsoft.com>". This allows you to specify the sender display name in mail clients.


h3. Attachments

Since version 0.9 attachment support has been improved. It is possible to have both, email body and multiple attachments. In order to activate multipart support, the 'multipart true' must be the first element in the closure passed to the sendMail method, e.g.:

{code}
sendMail {
    multipart true
    to issue.watchers.email.toArray()
    subject "The issue you watch has been updated"
    body "Hello Watcher!"
    attachBytes "Some-File-Name.xml", "text/xml", contentOrder.getBytes("UTF-8")
}
{code}

See also [GRAILSPLUGINS-1175|http://jira.codehaus.org/browse/GRAILSPLUGINS-1175].
