To send HTML mail you can use the @html@ method instead of the @body@ method:

{code}
sendMail {
  to "fred@g2one.com"
  subject "Hello John"
  html '<b>Hello</b> World'
}
{code}

If your HTML is contained within a GSP template you can use the render tag called as a method (available in controllers and tag libraries):

{code}
sendMail {
  to "john@g2one.com"
  subject "Hello John"
  html g.render(template:"myMailTemplate")
}
{code}

If you wish to render a mail body from a GSP view from anywhere in your application, including from services or jobs where there may or may not be a current request, you can use the new body method variant (v0.4):

{code}
sendMail {
  to "john@g2one.com"
  subject "Hello John"
  body( view:"/emailconfirmation/mail/confirmationRequest",
      plugin:"email-confirmation",
      model:[fromAddress:'bill@microsoft.com'])
}
{code}

The view is the absolute path (or relative if you have a current controller) to the GSP. The plugin parameter is optional - if you need to render a template that may exist in a plugin installed in your application, you must include the name here. The model parameter is a map representing the model the GSP will see for rendering data.

In this case the content type will be auto-sensed - use the GSP page contentType directive to set the content-type to use in the e-mail. The *default* is text/plain so you must include this at the top of the GSP for a HTML email:

{code}
<%@ page contentType="text/html"%>
{code}

Note however that due to a limitation of the underlying Spring APIs used, XHTML content type text/xhtml will not result in a correct XHTML email.

This plugin also accepts emails in the form "Bill Gates<bill@microsoft.com>". This allows you to specify the sender display name in mail clients.

h3. Multiple recipients

You can send mail to multiple recipients (in either of 'to', 'cc' or 'bcc') at once.

{code}
sendMail {
    to "fred@g2one.com","ginger@g2one.com"
    subject "Hello to mutliple recipients"
    body "Hello Fred! Hello Ginger!"
}
{code}

There is a pitfall when using a List for storing the recipients. You'll have to invoke toArray when providing it to the builder, like this:

{code}
sendMail {
    to issue.watchers.email.toArray()
    subject "The issue you watch has been updated"
    body "Hello Watcher!"
}
{code}

If you forget the call to @toArray@, Groovy will convert the list (even a list with a single entry) to a @String@ (the same way it does on the interactive console). The result will be something that is not a valid email address and you'll face @javax.mail.internet.AddressException@.

h3. Attachments

Since version 0.9 attachment support has been improved. It is possible to have both, email body and multiple attachments. In order to activate multipart support, the 'multipart true' must be the first element in the closure passed to the sendMail method, e.g.:

{code}
sendMail {
    multipart true
    to issue.watchers.email.toArray()
    subject "The issue you watch has been updated"
    body "Hello Watcher!"
    attachBytes "Some-File-Name.xml", "text/xml", contentOrder.getBytes("UTF-8")
}
{code}

See also [GRAILSPLUGINS-1175|http://jira.codehaus.org/browse/GRAILSPLUGINS-1175].

h3. Troubleshooting

* If you face @javax.mail.internet.AddressException@ errors referring to "Illegal address in string" or "Missing ']' in string", it could be that you try to send to a @List@ of recipients, which is not supported by the plugin. See 'Multiple recipients' above for information how to deal with that.
* If you call sendMail in a service class rendering a gsp template, you may realize that the plugin is rendering the template as text/plain instead of html. To solve this issue you have to put in your gsp <%@ page contentType="text/html" %> or <%@ page contentType="text/xhtml" %> without setting the encoding
