Mail is sent using the @sendMail()@ method of the @mailService@. This plugin also adds a shortcut @sendMail()@ method to all controllers and services in your application that simply delegates to the @mailService@.

{code}
class PersonController {
    
    def create = {
        // create user
        
        sendMail {
            from "admin@mysystem.com"
            subject "New user"
            text "A new user has been created"
        }
    }
    
}
{code}

The @sendMail()@ method takes a single @Closure@ argument that uses a DSL to configure the message to be sent. This section describes the aspects of the DSL.

Alternatively, you can use the @sendMail@ method of the @mailService@ directly.

{code}
class PersonController {
    
    def mailService
    
    def create = {
        // create user
        
        mailService.sendMail {
            from "admin@mysystem.com"
            subject "New user"
            text "A new user has been created"
        }
    }
    
}
{code}

h3. Recipients

The DSL provides @to@, @cc@ and @bcc@ methods that allow you to set one or more address values for these recipient types.

{code}
sendMail {
    to "someone@org.com"
    cc "manager@org.com"
    bcc "employee1\@org.com", "employee2\@org.com"
    …
}
{code}

All methods take one or more string values that are an email address using the syntax of "RFC822":http://www.ietf.org/rfc/rfc822.txt. Typical address syntax is of the form @"user\@host.domain"@ or @"Personal Name <user\@host.domain>"@.

h3. Message Content

Message content is specified by either the @text@ and/or @html@ methods that specify either the plain text or HTML content respectively.

{note}
As of version 1.0, the @body@ method that could be used to specify the message content has been deprecated (but is still there). The @body@ method requires the user to specify the content type of the message using a GSP directive such as:

<%\@ page contentType="text/html" %>
{note}

h4. HTML Email

To send HTML mail you can use the @html@ method. This will set the content type of the message to @text/html@.

You can either supply a string value…

{code}
sendMail {
    to "user@somewhere.org"
    subject "Hello John"
    html "<b>Hello</b> World"
}
{code}

Or a view to render to form the content…

{code}
sendMail {
    to "user@somewhere.org"
    subject "Hello John"
    html view: "/emails/hello", model: [param1: "value1", param2: "value2"]
}
{code}

See the section on using views for more details of the parameters to this version of @html@.

h4. Plain Text Email

To send plain text mail you can use the @text@ method. This will set the content type of the message to @text/plain@. 

You can either supply a string value…

{code}
sendMail {
    to "user@somewhere.org"
    subject "Hello John"
    text "Hello World"
}
{code}

Or a view to render to form the content…

{code}
sendMail {
    to "user@somewhere.org"
    subject "Hello John"
    text view: "/emails/hello", model: [param1: "value1", param2: "value2"]
}
{code}

See the section on using views for more details of the parameters to this version of @text@.

h4. Plain Text *and* HTML

It is possible to send a multipart message that contains both plain text and HTML versions of the message. In this situation, the mail reading client is responsible for selecting the variant to display to the user.

To do this, simply use both the @html@ and @text@ methods…

{code}
sendMail {
    to "user@somewhere.org"
    subject "Hello John"
    text view: "/emails/text-hello", model: [param1: "value1", param2: "value2"]
    html view: "/emails/html-hello", model: [param1: "value1", param2: "value2"]
}
{code}

h4. Using Views

The _view_ is the absolute path (or relative to the current controller if during a request) to the GSP, just like the existing Grails @render@ method.

If the view you wish to render comes from a plugin you must specify the plugin name as the _plugin_ parameter, just like the existing Grails @render@ method.

The _model_ parameter is a map representing the model the GSP will see for rendering data, just like the existing Grails @render@ method.

h3. Attachments

Since version 0.9 attachment support has been improved. It is possible to have both, email body and multiple attachments. In order to activate multipart support, the 'multipart true' must be the first element in the closure passed to the sendMail method, e.g.:

{code}
sendMail {
    multipart true
    to issue.watchers.email.toArray()
    subject "The issue you watch has been updated"
    body "Hello Watcher!"
    attachBytes "Some-File-Name.xml", "text/xml", contentOrder.getBytes("UTF-8")
}
{code}

See also [GRAILSPLUGINS-1175|http://jira.codehaus.org/browse/GRAILSPLUGINS-1175].
